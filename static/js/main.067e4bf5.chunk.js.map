{"version":3,"sources":["tools/aes/Encrypt.jsx","tools/aes/Decrypt.jsx","tools/ecc/Sign.jsx","tools/ecc/Verify.jsx","containers/Home.jsx","containers/Tool.jsx","tools/aes/Index.jsx","tools/ecc/Generator.jsx","tools/ecc/Index.jsx","containers/NotFound.jsx","Routes.js","App.jsx","serviceWorker.js","index.js"],"names":["Encrypt","_getPrototypeOf2","_this","Object","D_Documents_Kuliah_Term_8_Security_kryptograf_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_len","arguments","length","args","Array","_key","D_Documents_Kuliah_Term_8_Security_kryptograf_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Documents_Kuliah_Term_8_Security_kryptograf_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","apply","concat","state","plaintext","password","ciphertext","validPlaintext","validPassword","event","value","target","setState","_this$state","_this$state2","key","crypto","createHash","update","Buffer","from","digest","iv","randomBytes","cipher","createCipheriv","encrypted","final","toString","_this2","_this$state3","_this$state4","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","md","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Group","controlId","Label","as","Control","size","type","onChange","e","handleChangePlaintext","placeholder","Text","handleChangePassword","rows","disabled","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","variant","onClick","handleEncrypt","Component","Decrypt","validCiphertext","validDecrypt","match","textParts","split","shift","encryptedText","join","decipher","createDecipheriv","decrypted","handleChangeCiphertext","Fragment","handleDecrypt","Sign","validPriv","validMessage","message","hash","signature","priv","ec","EC","privBuf","msgBuf","hashBuf","sgn","keyFromPrivate","sign","der","toDER","handleChangeMessage","handleChangePrivKey","handleSign","Verify","validPub","validHash","validSignature","verified","pub","keyFromPublic","verify","handleChangeHash","handleChangeSignature","handleChangePubKey","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","handleVerify","Home","react_default","Jumbotron","Container","Row","Col","CardDeck","Card","Body","Title","Footer","Table","lib","to","Button","react_fontawesome_index_es","icon","Tool","Navbar","fixed","bg","Brand","Nav","toolRoutes","map","route","index","path","Link","name","style","paddingTop","Switch","Route","exact","component","Index","Generator","classCallCheck","possibleConstructorReturn","getPrototypeOf","validCurve","curve","b","p","Gx","Gy","validated","ecurve","getCurveByName","padStart","G","affineX","affineY","form","currentTarget","preventDefault","stopPropagation","checkValidity","curvePt","multiply","BigInteger","fromBuffer","getEncoded","href","Form","noValidate","onSubmit","handleGenerate","ecc_Generator","NotFound","mainRoutes","ECC","AES","App","minHeight","role","Boolean","window","location","hostname","library","add","fas","far","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.067e4bf5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\nimport crypto from 'crypto';\r\n\r\nclass Encrypt extends Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      plaintext: '',\r\n      password: '',\r\n      ciphertext: '',\r\n      validPlaintext: true,\r\n      validPassword: true,\r\n    };\r\n  }\r\n\r\n  handleChangePlaintext(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      plaintext: value,\r\n      validPlaintext: !!value\r\n    });\r\n  }\r\n\r\n  handleChangePassword(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      password: value,\r\n      validPassword: !!value\r\n    });\r\n  }\r\n\r\n  handleEncrypt(event) {\r\n    const { password, plaintext } = this.state;\r\n    const { validPassword, validPlaintext } = this.state;\r\n    if (!password) {\r\n      this.setState({ validPassword: false });\r\n    }\r\n    if (!plaintext) {\r\n      this.setState({ validPlaintext: false });\r\n    }\r\n    if (!validPassword || !validPlaintext) {\r\n      return;\r\n    }\r\n    const key = crypto.createHash('sha256').update(Buffer.from(password, 'utf8')).digest();\r\n    const iv = crypto.randomBytes(16);\r\n    let cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\r\n    let encrypted = cipher.update(plaintext);\r\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n    let ciphertext =  iv.toString('hex') + ':' + encrypted.toString('hex');\r\n    this.setState({\r\n      ciphertext: ciphertext\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { validPlaintext, validPassword } = this.state;\r\n    const { plaintext, password, ciphertext } = this.state;\r\n    return (\r\n      <Row>\r\n        <Col md=\"4\">\r\n          <h3 className=\"font-weight-normal\">Encryption</h3>\r\n          <p>\r\n            Encrypt with 256-bit key\r\n          </p>\r\n        </Col>\r\n        <Col md=\"6\">\r\n        <Form>\r\n            <Form.Group controlId=\"encPlain\">\r\n              <Form.Label as=\"small\">Plaintext</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validPlaintext ? '' : 'is-invalid'}`}\r\n                value={plaintext}\r\n                onChange={e => this.handleChangePlaintext(e)}\r\n                placeholder=\"e.g. hello world!\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validPlaintext ? '' : 'Message cannot be empty'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"encPassword\">\r\n              <Form.Label as=\"small\">Password</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validPassword ? '' : 'is-invalid'}`}\r\n                value={password}\r\n                onChange={e => this.handleChangePassword(e)}\r\n                placeholder=\"e.g. secret\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validPassword ? '' : 'Password cannot be empty!'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"encCipher\">\r\n              <Form.Label as=\"small\">Ciphertext</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows=\"3\"\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className=\"text-monospace\"\r\n                disabled\r\n                value={ciphertext}\r\n                placeholder=\"Encrypted message will appear here\"\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"info\"\r\n              onClick={e => this.handleEncrypt(e)}\r\n            >\r\n              Encrypt\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Encrypt;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\nimport crypto from 'crypto';\r\n\r\nclass Decrypt extends Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      ciphertext: '',\r\n      password: '',\r\n      plaintext: '',\r\n      validCiphertext: true,\r\n      validPassword: true,\r\n      validDecrypt: 0\r\n    };\r\n  }\r\n\r\n  handleChangeCiphertext(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      ciphertext: value,\r\n      validCiphertext: value.match(/^[0-9a-f]{32}:[0-9a-f]+$/i)\r\n    });\r\n  }\r\n\r\n  handleChangePassword(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      password: value,\r\n      validPassword: !!value\r\n    });\r\n  }\r\n\r\n  handleDecrypt(event) {\r\n    const { password, ciphertext } = this.state;\r\n    const { validPassword, validCiphertext } = this.state;\r\n    if (!password) {\r\n      this.setState({ validPassword: false });\r\n    }\r\n    if (!ciphertext) {\r\n      this.setState({ validPlaintext: false });\r\n    }\r\n    if (!validPassword || !validCiphertext) {\r\n      return;\r\n    }\r\n\r\n    let textParts = ciphertext.split(':');\r\n    let iv = new Buffer(textParts.shift(), 'hex');\r\n    let key = crypto\r\n      .createHash('sha256')\r\n      .update(Buffer.from(password, 'utf8'))\r\n      .digest();\r\n    let encryptedText = new Buffer(textParts.join(':'), 'hex');\r\n    let decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);\r\n    try {\r\n      let decrypted = decipher.update(encryptedText);\r\n      decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n      this.setState({\r\n        plaintext: decrypted.toString(),\r\n        validDecrypt: 1\r\n      });\r\n    } catch (e) {\r\n      this.setState({\r\n        plaintext: 'Cannot decrypt ciphertext',\r\n        validDecrypt: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { validCiphertext, validPassword, validDecrypt } = this.state;\r\n    const { plaintext, password, ciphertext } = this.state;\r\n    return (\r\n      <Row>\r\n        <Col md=\"4\">\r\n          <h3 className=\"font-weight-normal\">Decryption</h3>\r\n          <p>Decrypt with 256-bit key</p>\r\n        </Col>\r\n        <Col md=\"6\">\r\n          <Form>\r\n            <Form.Group controlId=\"decCiphertext\">\r\n              <Form.Label as=\"small\">Ciphertext</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows=\"3\"\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validCiphertext ? '' : 'is-invalid'}`}\r\n                value={ciphertext}\r\n                onChange={e => this.handleChangeCiphertext(e)}\r\n                placeholder=\"e.g. 0123456789abcdef:62e78b76c69736822a42373abe5193a3\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validCiphertext ? (\r\n                  ''\r\n                ) : (\r\n                  <>\r\n                    Ciphertext must match{' '}\r\n                    <span className=\"text-monospace\">/^[0-9a-f]{32}:[0-9a-f]+$/i</span>\r\n                  </>\r\n                )}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"decPassword\">\r\n              <Form.Label as=\"small\">Password</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validPassword ? '' : 'is-invalid'}`}\r\n                value={password}\r\n                onChange={e => this.handleChangePassword(e)}\r\n                placeholder=\"e.g. secret\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validPassword ? '' : 'Password cannot be empty!'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"decPlaintext\">\r\n              <Form.Label as=\"small\">Plaintext</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows=\"2\"\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace font-weight-bold ${\r\n                  validDecrypt === 1\r\n                    ? 'is-valid text-success'\r\n                    : validDecrypt === -1\r\n                    ? 'is-invalid text-danger'\r\n                    : ''\r\n                }`}\r\n                disabled\r\n                value={plaintext}\r\n                placeholder=\"Encrypted message will appear here\"\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"info\" onClick={e => this.handleDecrypt(e)}>\r\n              Decrypt\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Decrypt;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\nimport crypto from 'crypto';\r\nimport { ec as EC } from 'elliptic';\r\n\r\nclass Sign extends Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      validPriv: true,\r\n      validMessage: true,\r\n      message: '',\r\n      hash: '',\r\n      signature: '',\r\n      priv: ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleSign(event) {\r\n    const { message, priv } = this.state;\r\n    const { validMessage, validPriv } = this.state;\r\n    if (!message) {\r\n      this.setState({ validMessage: false });\r\n    }\r\n    if (!priv) {\r\n      this.setState({ validPriv: false });\r\n    }\r\n    if (!validMessage || !validPriv) {\r\n      return;\r\n    }\r\n    const ec = new EC('secp256k1');\r\n    let privBuf = Buffer.from(priv, 'hex');\r\n    let msgBuf = Buffer.from(message, 'utf8');\r\n    let hashBuf = crypto\r\n      .createHash('sha256')\r\n      .update(msgBuf)\r\n      .digest();\r\n    let key = ec.keyFromPrivate(privBuf);\r\n    let sgn = key.sign(hashBuf);\r\n    let der = Buffer.from(sgn.toDER());\r\n    this.setState({\r\n      hash: hashBuf.toString('hex'),\r\n      signature: der.toString('hex')\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleChangeMessage(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      message: value,\r\n      validMessage: !!value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleChangePrivKey(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      priv: value,\r\n      validPriv: !!value.match(/^[0-9a-f]{64}$/i)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { validMessage, validPriv } = this.state;\r\n    const { message, priv, hash, signature } = this.state;\r\n    return (\r\n      <Row>\r\n        <Col md=\"4\">\r\n          <h3 className=\"font-weight-normal\">Message signature</h3>\r\n          <p>The signature algorithm only supports <strong className=\"text-danger\">secp256k1</strong> curve</p>\r\n        </Col>\r\n        <Col md=\"6\">\r\n          <Form>\r\n            <Form.Group controlId=\"signMsg\">\r\n              <Form.Label as=\"small\">Message</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validMessage ? '' : 'is-invalid'}`}\r\n                value={message}\r\n                onChange={e => this.handleChangeMessage(e)}\r\n                placeholder=\"e.g. hello world!\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validMessage ? '' : 'Message cannot be empty'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"signPrivKey\">\r\n              <Form.Label as=\"small\">Private key</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows=\"2\"\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validPriv ? '' : 'is-invalid'}`}\r\n                value={priv}\r\n                onChange={e => this.handleChangePrivKey(e)}\r\n                placeholder=\"e.g. 0f0f1e1e2d2d3c3c4b4b5a5a6969787887879696a5a5b4b4c3c3d2d2e1e1f0f0\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validPriv ? '' : 'Private key must be a 256-bit hexadecimal string'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"genPubKey\">\r\n              <Form.Label as=\"small\">Hash (SHA-256)</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className=\"text-monospace\"\r\n                disabled\r\n                value={hash}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"genPubKey\">\r\n              <Form.Label as=\"small\">Signature (in DER format)</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows=\"3\"\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className=\"text-monospace\"\r\n                disabled\r\n                value={signature}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"info\"\r\n              onClick={e => this.handleSign(e)}\r\n            >\r\n              Sign\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sign;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col, Form, Button, Alert } from 'react-bootstrap';\r\nimport { ec as EC } from 'elliptic';\r\n\r\nclass Verify extends Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      validPub: true,\r\n      validHash: true,\r\n      validSignature: true,\r\n      verified: 0,\r\n      hash: '',\r\n      signature: '',\r\n      pub: ''\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleVerify(event) {\r\n    const { hash, signature, pub } = this.state;\r\n    const { validSignature, validHash, validPub } = this.state;\r\n    if (!hash) {\r\n      this.setState({ validHash: false });\r\n    }\r\n    if (!signature) {\r\n      this.setState({ validSignature: false });\r\n    }\r\n    if (!pub) {\r\n      this.setState({ validPub: false });\r\n    }\r\n    if (!validSignature || !validHash || !validPub) {\r\n      return;\r\n    }\r\n    const ec = new EC('secp256k1');\r\n    let hashBuf = Buffer.from(hash, 'hex');\r\n    let key = ec.keyFromPublic(pub, 'hex');\r\n    this.setState({\r\n      verified: key.verify(hashBuf, signature) ? 1 : -1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleChangeHash(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      hash: value,\r\n      validHash: !!value.match(/^[0-9a-f]{64}$/i)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleChangePubKey(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      pub: value,\r\n      validPub: !!value.match(/^04[0-9a-f]{128}$/i)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleChangeSignature(event) {\r\n    let value = event.target.value;\r\n    this.setState({\r\n      signature: value,\r\n      validSignature: !!value.match(/^[0-9a-f]+$/i)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { hash, signature, pub, verified } = this.state;\r\n    const { validSignature, validHash, validPub } = this.state;\r\n    return (\r\n      <Row>\r\n        <Col md=\"4\">\r\n          <h3 className=\"font-weight-normal\">Signature verification</h3>\r\n          <p>\r\n            The signature verification algorithm only supports{' '}\r\n            <strong className=\"text-danger\">secp256k1</strong> curve\r\n          </p>\r\n        </Col>\r\n        <Col md=\"6\">\r\n          <Form>\r\n            <Form.Group controlId=\"verHash\">\r\n              <Form.Label as=\"small\">Hash (SHA-256)</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validHash ? '' : 'is-invalid'}`}\r\n                value={hash}\r\n                onChange={e => this.handleChangeHash(e)}\r\n                placeholder=\"e.g. 0f1e2d3c4b5a69788796a5b4c3d2e1f0f0e1d2c3b4a5968778695a4b3c2d1e0f\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validHash ? '' : 'Hash must be a 256-bit hexadecimal string'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"verSignature\">\r\n              <Form.Label as=\"small\">Signature (in DER format)</Form.Label>\r\n              <Form.Control\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                rows=\"3\"\r\n                as=\"textarea\"\r\n                className={`text-monospace ${validSignature ? '' : 'is-invalid'}`}\r\n                value={signature}\r\n                onChange={e => this.handleChangeSignature(e)}\r\n                placeholder=\"place the DER signature as a hex string\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validSignature ? '' : 'Signature cannot be empty'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"verPubKey\">\r\n              <Form.Label as=\"small\">Public key</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows=\"3\"\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                className={`text-monospace ${validPub ? '' : 'is-invalid'}`}\r\n                value={pub}\r\n                onChange={e => this.handleChangePubKey(e)}\r\n                placeholder=\"public key starting with '04'\"\r\n              />\r\n              <Form.Text className=\"text-danger\">\r\n                {validPub\r\n                  ? ''\r\n                  : 'Public key must be a 520-bit hexadecimal string starting with 0x04'}\r\n              </Form.Text>\r\n            </Form.Group>\r\n            {verified !== 0 ? (\r\n              <Alert variant={verified === 1 ? 'success' : 'danger'}>\r\n                The signature is <strong>{verified === 1 ? 'valid' : 'invalid'}</strong>\r\n              </Alert>\r\n            ) : (\r\n              ''\r\n            )}\r\n            <Button variant=\"info\" onClick={e => this.handleVerify(e)}>\r\n              Verify\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Verify;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Button, Card, CardDeck, Table, Jumbotron } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Jumbotron className=\"text-center bg-white mb-0 border-bottom\">\r\n          <Container>\r\n            <h1 className=\"display-3\">kryptograf</h1>\r\n            <p>A proof-of-concept on cryptography algorithms</p>\r\n          </Container>\r\n        </Jumbotron>\r\n        <section className=\"bg-light py-5\">\r\n          <Container className=\"flex-fill\">\r\n            <Row>\r\n              <Col>\r\n                <CardDeck>\r\n                  <Card className=\"shadow-sm\">\r\n                    <Card.Body>\r\n                      <Card.Title>Asymmetric-key algorithms</Card.Title>\r\n                      <Card.Text>\r\n                        Asymmetric cryptography or public-key cryptography is a cryptography system\r\n                        that uses a pair of keys: a public one (can be known by others), and a\r\n                        private one (which must always be kept secret). Below are examples\r\n                        demonstrating asymmetric cryptography algorithms:\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"pb-0\">\r\n                      <Table size=\"sm\" className=\"border-bottom\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <td className=\"align-middle\">Elliptic Curve Cryptography</td>\r\n                            <td className=\"text-right\">\r\n                              <LinkContainer to=\"tools/ecc\">\r\n                                <Button size=\"sm\" variant=\"info\">\r\n                                  <FontAwesomeIcon icon=\"key\" />\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </Table>\r\n                    </Card.Footer>\r\n                  </Card>\r\n                  <Card className=\"shadow-sm\">\r\n                    <Card.Body>\r\n                      <Card.Title>Symmetric-key algorithms</Card.Title>\r\n                      <Card.Text>\r\n                        Symmetric-key algorithms are cryptography algorithms that uses the same key\r\n                        for both encryption and decryption. Below are examples demonstrating\r\n                        symmetric-key algorithms:\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"pb-0\">\r\n                      <Table size=\"sm\" className=\"border-bottom\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <td className=\"align-middle\">Advanced Encryption Standard</td>\r\n                            <td className=\"text-right\">\r\n                              <LinkContainer to=\"tools/aes\">\r\n                                <Button size=\"sm\" variant=\"info\">\r\n                                  <FontAwesomeIcon icon=\"key\" />\r\n                                </Button>\r\n                              </LinkContainer>\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </Table>\r\n                    </Card.Footer>\r\n                  </Card>\r\n                </CardDeck>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { Navbar, Nav, Container } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { toolRoutes } from '../Routes';\r\nimport './Tool.css';\r\n\r\nclass Tool extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\">\r\n          <Container>\r\n            <LinkContainer to=\"/\">\r\n              <Navbar.Brand className=\"font-weight-light\">kryptograf</Navbar.Brand>\r\n            </LinkContainer>\r\n            <Nav className=\"mr-auto\">\r\n              {toolRoutes.map((route, index) => (\r\n                <LinkContainer to={`/tools${route.path}`} key={index}>\r\n                  <Nav.Link>{route.name}</Nav.Link>\r\n                </LinkContainer>\r\n              ))}\r\n            </Nav>\r\n          </Container>\r\n        </Navbar>\r\n        <section style={{ paddingTop: 56 }}>\r\n          <Switch>\r\n            {toolRoutes.map((route, index) => (\r\n              <Route\r\n                key={index}\r\n                path={`/tools${route.path}`}\r\n                exact={route.exact}\r\n                component={route.component}\r\n              />\r\n            ))}\r\n          </Switch>\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tool;\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Encrypt from './Encrypt';\r\nimport Decrypt from './Decrypt';\r\n\r\nclass Index extends Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"py-5\">\r\n        <h1 className=\"display-4 mb-5 font-weight-normal d-none d-md-block\">Advanced Encryption Standard (AES)</h1>\r\n        <h1 className=\"mb-5 font-weight-normal d-md-none\">Advanced Encryption Standard (AES)</h1>\r\n        <hr/>\r\n        <Encrypt/>\r\n        <hr/>\r\n        <Decrypt/>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap';\r\nimport ecurve from 'ecurve';\r\nimport crypto from 'crypto';\r\nimport BigInteger from 'bigi';\r\n\r\nclass Generator extends Component {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.state = {\r\n      validCurve: true,\r\n      curve: { a: '-', b: '-', p: '-', Gx: '-', Gy: '-' },\r\n      priv: '-',\r\n      pub: '-',\r\n      validated: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleChangeCurve(event) {\r\n    let curve = ecurve.getCurveByName(event.target.value);\r\n    if (!curve) {\r\n      this.setState({\r\n        curve: { a: '-', b: '-', p: '-', Gx: '-', Gy: '-' },\r\n        validCurve: event.target.value === ''\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      curve: {\r\n        name: event.target.value,\r\n        a: curve.a.toString('16').padStart(2, '0'),\r\n        b: curve.b.toString('16').padStart(2, '0'),\r\n        p: curve.p.toString('16'),\r\n        Gx: curve.G.affineX.toString('16'),\r\n        Gy: curve.G.affineY.toString('16')\r\n      },\r\n      validCurve: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {SyntheticEvent} event\r\n   */\r\n  handleGenerate(event) {\r\n    const form = event.currentTarget;\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    if (form.checkValidity()) {\r\n      let priv = crypto.randomBytes(32);\r\n      let ecparams = ecurve.getCurveByName('secp256k1')\r\n      let curvePt = ecparams.G.multiply(BigInteger.fromBuffer(priv));\r\n      this.setState({\r\n        priv: priv.toString('hex'),\r\n        pub: curvePt.getEncoded(false).toString('hex'),\r\n      });\r\n      this.setState({ validated: false });\r\n    } else {\r\n      this.setState({ validated: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <Col md=\"4\">\r\n          <h3 className=\"font-weight-normal\">Keypair generator</h3>\r\n          <p>\r\n            The keypair generator uses the <strong className=\"text-danger\">secp256k1</strong> curve. \r\n            Here's <a href=\"https://en.bitcoin.it/wiki/Secp256k1\">more info</a> on how it works\r\n          </p>\r\n        </Col>\r\n        <Col md=\"6\">\r\n          <Form noValidate validated={this.state.validated} onSubmit={e => this.handleGenerate(e)}>\r\n            <Form.Group controlId=\"genPrivKey\">\r\n              <Form.Label as=\"small\">Private key</Form.Label>\r\n              <Form.Control as=\"textarea\" rows=\"3\" size=\"sm\" type=\"text\" className=\"text-monospace\" disabled value={this.state.priv}/>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"genPubKey\">\r\n              <Form.Label as=\"small\">Public key</Form.Label>\r\n              <Form.Control as=\"textarea\" rows=\"5\" size=\"sm\" type=\"text\" className=\"text-monospace\" disabled value={this.state.pub}/>\r\n            </Form.Group>\r\n            <Button variant=\"info\" type=\"submit\">Generate</Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Generator from './Generator';\r\nimport Sign from './Sign';\r\nimport Verify from './Verify';\r\n\r\nclass Index extends Component {\r\n  render() {\r\n    return (\r\n      <Container className=\"py-5\">\r\n        <h1 className=\"display-4 mb-5 font-weight-normal d-none d-md-block\">Elliptic Curve Cryptography (ECC)</h1>\r\n        <h1 className=\"mb-5 font-weight-normal d-md-none\">Elliptic Curve Cryptography (ECC)</h1>\r\n        <hr/>\r\n        <Generator />\r\n        <hr/>\r\n        <Sign />\r\n        <hr/>\r\n        <Verify />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NotFound extends Component {\r\n  render() {\r\n    return (\r\n      <Jumbotron className=\"bg-white mb-0 text-center\">\r\n        <h1 className=\"display-4\">are you lost?</h1>\r\n        <span className=\"text-muted\">go <Link to=\"/\">home</Link></span>\r\n      </Jumbotron>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NotFound;\r\n","import Home from './containers/Home';\r\nimport Tool from './containers/Tool';\r\nimport AES from './tools/aes/Index';\r\nimport ECC from './tools/ecc/Index';\r\nimport NotFound from './containers/NotFound';\r\n\r\nexport const mainRoutes = [\r\n  {\r\n    path: '/',\r\n    exact: true,\r\n    component: Home\r\n  },\r\n  {\r\n    path: '/tools/:name',\r\n    exact: false,\r\n    component: Tool\r\n  },\r\n  {\r\n    path: '',\r\n    exact: false,\r\n    component: NotFound\r\n  }\r\n];\r\n\r\nexport const toolRoutes = [\r\n  {\r\n    path: '/ecc',\r\n    name: 'ECC',\r\n    component: ECC\r\n  },\r\n  {\r\n    path: '/aes',\r\n    name: 'AES',\r\n    component: AES\r\n  },\r\n  {\r\n    path: '',\r\n    exact: false,\r\n    component: NotFound\r\n  }\r\n];\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { mainRoutes } from './Routes';\nimport { Container } from 'react-bootstrap';\nimport { Route, Switch, Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"d-flex flex-column\" style={{ minHeight: '100vh' }}>\n        <main role=\"main\" className=\"flex-fill\">\n          <Switch>\n            {mainRoutes.map((route, index) => (\n              <Route key={index} path={route.path} exact={route.exact} component={route.component} />\n            ))}\n          </Switch>\n        </main>\n        <footer className=\"text-muted py-3 border-top\">\n          <Container>\n            <p className=\"mb-2 float-right\">\n              <a href=\"https://github.com/nickylogan/kryptograf\">Source</a>\n            </p>\n            <p className=\"mb-2\">\n              Pay a visit to our <Link to=\"/authors\">contributors</Link>\n            </p>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlibrary.add(fas, far);\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}